{"version":3,"file":"index.js","sources":["../../src/utils/index.ts"],"sourcesContent":["import { css } from 'styled-components';\nimport { FontType, FontWeights } from '@types';\n\nexport const hexToRGBA = (hex: string, alpha: string | number) => {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n\n    if (alpha) return `rgba(${r},${g},${b}, ${alpha})`;\n    return `rgb(${r},${g},${b})`;\n};\n\nexport const isEmpty = (value: any) =>\n    value === undefined || value === null || value === '' || value === {} || value === [];\n\nconst Currencies: { [key: string]: any } = {\n    dollar: {\n        countryCode: 'US',\n        currency: 'USD',\n    },\n    inr: {\n        countryCode: 'IN',\n        currency: 'INR',\n    },\n};\n\nexport const currencyFormatter = (\n    rupees: number | string,\n    fallback = '',\n    minimumFractionDigits = 0,\n    cur = 'inr',\n) => {\n    const formatNumber = Number(rupees);\n    if ((formatNumber !== 0 && !formatNumber) || Number.isNaN(formatNumber)) {\n        if (fallback) return fallback;\n        return '';\n    }\n    // console.log(cur);\n    if (window?.Intl) {\n        const obj = Currencies[cur];\n\n        if (obj) {\n            return new Intl.NumberFormat(`en-${obj.countryCode}`, {\n                style: 'currency',\n                currency: `${obj.currency}`,\n                minimumFractionDigits: minimumFractionDigits,\n                maximumFractionDigits: 2,\n            })\n                .format(formatNumber)\n                .replace(/\\s/g, '');\n        }\n    }\n    return formatNumber;\n};\n\nexport const generateTextStyle = (\n    type = FontType.BODY,\n    fontSize = 14,\n    fontWeight = FontWeights.REGULAR,\n    color = '#FFFFFF',\n) => {\n    const LINE_HEIGHT_MULTIPLIER = {\n        [FontType.HEADING]: 1.25,\n        [FontType.CAPS]: 1.25,\n        [FontType.BODY]: 1.5,\n        [FontType.SERIF_HEADING]: 1.25,\n    };\n\n    const getLetterSpacing = (fType: FontType, fSize: number, fWeight: FontWeights) => {\n        switch (fType) {\n            case FontType.HEADING:\n                switch (fWeight) {\n                    case FontWeights.EXTRA_BOLD:\n                        return fSize >= 44 ? 0 : 0.2;\n                    case FontWeights.BOLD:\n                        return fSize >= 13 ? 0.2 : 0.4;\n                    case FontWeights.SEMI_BOLD:\n                        return fSize >= 18 ? 0.2 : 0.4;\n                    default:\n                        return 0.2;\n                }\n            case FontType.CAPS:\n                if (fSize > 8) return 2;\n                return 1;\n            case FontType.BODY:\n                return 0.4;\n            case FontType.SERIF_HEADING:\n                return 0.2;\n            default:\n                return 0.4;\n        }\n    };\n\n    const letterSpacing = getLetterSpacing(type, fontSize, fontWeight);\n\n    return css`\n        font-size: ${fontSize}px;\n        font-style: normal;\n        font-weight: ${fontWeight};\n        line-height: ${Math.round(fontSize * LINE_HEIGHT_MULTIPLIER[type])}px;\n        letter-spacing: ${letterSpacing}px;\n        color: ${color ?? ''};\n        ${type === FontType.CAPS\n            ? css`\n                  text-transform: uppercase;\n              `\n            : ''}\n    `;\n};\n\nexport function getRandomInt(min: number, max: number): number {\n    const minN = Math.ceil(min);\n    const maxN = Math.floor(max);\n    return Math.floor(Math.random() * (maxN - minN + 1)) + minN;\n}\n\nexport const isImageLoaded = (src: string) =>\n    new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = src;\n        image.addEventListener('load', () => {\n            resolve(true);\n        });\n        image.addEventListener('error', () => {\n            reject();\n        });\n    });\n\nfunction isObject(item: any): boolean {\n    return item instanceof Object && !Array.isArray(item);\n}\n\nexport function mergeDeep(target: any, ...sources: any[]): any {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n"],"names":["hexToRGBA","hex","alpha","r","parseInt","slice","g","b","isEmpty","value","undefined","Currencies","dollar","countryCode","currency","inr","currencyFormatter","rupees","fallback","minimumFractionDigits","cur","formatNumber","Number","isNaN","window","Intl","obj","NumberFormat","style","maximumFractionDigits","format","replace","generateTextStyle","type","FontType","BODY","fontSize","fontWeight","FontWeights","REGULAR","color","LINE_HEIGHT_MULTIPLIER","HEADING","_defineProperty","CAPS","SERIF_HEADING","getLetterSpacing","fType","fSize","fWeight","EXTRA_BOLD","BOLD","SEMI_BOLD","letterSpacing","css","Math","round","getRandomInt","min","max","minN","ceil","maxN","floor","random","isImageLoaded","src","Promise","resolve","reject","image","Image","addEventListener","isObject","item","Object","Array","isArray","mergeDeep","target","sources","length","source","shift","key","assign"],"mappings":"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"}