'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');

function clamp(v, min, max) {
  return Math.max(min, Math.min(v, max));
}

var V = {
  toVector: function toVector(v, fallback) {
    if (v === undefined) v = fallback;
    return Array.isArray(v) ? v : [v, v];
  },
  add: function add(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1]];
  },
  sub: function sub(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1]];
  },
  addTo: function addTo(v1, v2) {
    v1[0] += v2[0];
    v1[1] += v2[1];
  },
  subTo: function subTo(v1, v2) {
    v1[0] -= v2[0];
    v1[1] -= v2[1];
  }
};

function rubberband(distance, dimension, constant) {
  if (dimension === 0 || Math.abs(dimension) === Infinity) return Math.pow(distance, constant * 5);
  return distance * dimension * constant / (dimension + constant * distance);
}

function rubberbandIfOutOfBounds(position, min, max) {
  var constant = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.15;
  if (constant === 0) return clamp(position, min, max);
  if (position < min) return -rubberband(min - position, max - min, constant) + min;
  if (position > max) return +rubberband(position - max, max - min, constant) + max;
  return position;
}

function computeRubberband(bounds, _ref, _ref2) {
  var _ref3 = _rollupPluginBabelHelpers.slicedToArray(_ref, 2),
      Vx = _ref3[0],
      Vy = _ref3[1];

  var _ref4 = _rollupPluginBabelHelpers.slicedToArray(_ref2, 2),
      Rx = _ref4[0],
      Ry = _ref4[1];

  var _bounds = _rollupPluginBabelHelpers.slicedToArray(bounds, 2),
      _bounds$ = _rollupPluginBabelHelpers.slicedToArray(_bounds[0], 2),
      X0 = _bounds$[0],
      X1 = _bounds$[1],
      _bounds$2 = _rollupPluginBabelHelpers.slicedToArray(_bounds[1], 2),
      Y0 = _bounds$2[0],
      Y1 = _bounds$2[1];

  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
}

exports.V = V;
exports.c = computeRubberband;
exports.r = rubberbandIfOutOfBounds;
//# sourceMappingURL=maths-b2a210f4.esm.js.map
