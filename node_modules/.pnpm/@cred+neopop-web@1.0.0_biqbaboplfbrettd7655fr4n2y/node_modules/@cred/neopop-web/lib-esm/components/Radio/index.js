import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { useRef } from 'react';
import { RadioLabel, StyledRadio } from './styles.js';
import { VerticalSpacer } from '../Helpers/index.js';
import withCheckHOC from '../Helpers/withCheckHOC.js';
import '../../primitives/index.js';
import { isEmpty } from '../../utils/index.js';
import { colorGuide } from '../../primitives/colors.js';

var _excluded = ["id", "label", "isChecked", "handleChange", "colorConfig", "colorMode"];

var Radio = function Radio(props) {
  var id = props.id,
      label = props.label,
      isChecked = props.isChecked,
      handleChange = props.handleChange,
      colorConfig = props.colorConfig,
      colorMode = props.colorMode,
      propsToFwd = _objectWithoutProperties(props, _excluded);

  var radioRef = useRef(null);
  var defaultColorConfig = colorGuide[colorMode === 'light' ? 'lightComponents' : 'darkComponents'].radio;

  var RadioStyledButton = function RadioStyledButton() {
    return /*#__PURE__*/React__default.createElement(StyledRadio, {
      onClick: function onClick() {
        var _radioRef$current;

        return radioRef === null || radioRef === void 0 ? void 0 : (_radioRef$current = radioRef.current) === null || _radioRef$current === void 0 ? void 0 : _radioRef$current.click();
      },
      colorConfig: isEmpty(colorConfig) ? defaultColorConfig : colorConfig !== null && colorConfig !== void 0 ? colorConfig : defaultColorConfig
    }, /*#__PURE__*/React__default.createElement("input", _extends({
      id: id,
      ref: radioRef,
      type: "radio",
      checked: isChecked,
      onChange: handleChange
    }, propsToFwd)), /*#__PURE__*/React__default.createElement("span", {
      className: "checkmark"
    }, " "));
  };

  if (label && colorConfig !== null && colorConfig !== void 0 && colorConfig.containerConfig) {
    return /*#__PURE__*/React__default.createElement(RadioLabel, _extends({
      htmlFor: id
    }, colorConfig === null || colorConfig === void 0 ? void 0 : colorConfig.containerConfig, {
      className: isChecked ? 'selected' : ''
    }), /*#__PURE__*/React__default.createElement(RadioStyledButton, null), /*#__PURE__*/React__default.createElement(VerticalSpacer, {
      n: 3
    }), /*#__PURE__*/React__default.createElement("div", {
      className: "label"
    }, label));
  }

  return /*#__PURE__*/React__default.createElement(RadioStyledButton, null);
};

var index = withCheckHOC(Radio);

export { index as default };
//# sourceMappingURL=index.js.map
