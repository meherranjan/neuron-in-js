import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default from 'react';
import { VerticalSpacer, Chevron } from '../Helpers/index.js';
import Typography from '../Typography/index.js';
import '../../primitives/index.js';
import '../Button/types.js';
import '../Typography/types.js';
import { Directions } from '../Helpers/types.js';
import { DropdownContainer } from './styles.js';
import { isEmpty } from '../../utils/index.js';
import { colorGuide } from '../../primitives/colors.js';
import { fontNameSpaces } from '../../primitives/typography.js';

var Dropdown = function Dropdown(props) {
  var _dropdownColorConfig$, _dropdownColorConfig$2;

  var onClick = props.onClick,
      label = props.label,
      colorConfig = props.colorConfig,
      colorMode = props.colorMode;
  var defaultColorConfig = colorGuide[colorMode === 'light' ? 'lightComponents' : 'darkComponents'].dropdown[label ? 'withLabel' : 'withoutLabel'];
  var dropdownColorConfig = isEmpty(colorConfig) ? defaultColorConfig : colorConfig !== null && colorConfig !== void 0 ? colorConfig : defaultColorConfig;
  return /*#__PURE__*/React__default.createElement(DropdownContainer, _extends({
    className: label ? '' : 'no-label'
  }, dropdownColorConfig, {
    onClick: onClick
  }), label ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Typography, _extends({}, fontNameSpaces.th13sb, {
    color: (_dropdownColorConfig$ = dropdownColorConfig === null || dropdownColorConfig === void 0 ? void 0 : dropdownColorConfig.text) !== null && _dropdownColorConfig$ !== void 0 ? _dropdownColorConfig$ : 'rgba(255,255,255,0.5)'
  }), label), /*#__PURE__*/React__default.createElement(VerticalSpacer, {
    n: 2
  })) : null, /*#__PURE__*/React__default.createElement(Chevron, {
    direction: Directions.SOUTH,
    color: (_dropdownColorConfig$2 = dropdownColorConfig === null || dropdownColorConfig === void 0 ? void 0 : dropdownColorConfig.chevron) !== null && _dropdownColorConfig$2 !== void 0 ? _dropdownColorConfig$2 : 'rgba(255,255,255,0.5)'
  }));
};

export { Dropdown as default };
//# sourceMappingURL=index.js.map
