{"version":3,"file":"scoremeter.js","sources":["../../src/primitives/scoremeter.ts"],"sourcesContent":["import { colorGuide } from '@primitives/colors';\nexport enum Bureaus {\n    crif = 'crif',\n    experian = 'experian',\n    equifax = 'equifax',\n}\n\nconst scoreConfig = {\n    excellent: {\n        type: 'excellent',\n        text: 'Excellent',\n    },\n    average: {\n        type: 'average',\n        text: 'Good',\n    },\n    poor: {\n        type: 'poor',\n        text: 'Poor',\n    },\n};\n\nexport const getTypeAndText = (score: number, bureau: string) => {\n    if (bureau === Bureaus.experian && score < 850) {\n        return score >= 750 ? scoreConfig.average : scoreConfig.poor;\n    } else if (bureau === Bureaus.crif && score < 770) {\n        return score >= 600 ? scoreConfig.average : scoreConfig.poor;\n    } else if (score < 780) {\n        return score >= 690 ? scoreConfig.average : scoreConfig.poor;\n    }\n\n    return scoreConfig.excellent;\n};\n\nconst darkScoreMeter = (score: number, bureau: 'crif' | 'experian' | 'equifax') => ({\n    colorMode: 'dark',\n    reading: score,\n    colorConfig: colorGuide.darkComponents.scoremeter,\n    type: getTypeAndText(score, bureau).type,\n    scoreDesc: getTypeAndText(score, bureau).text,\n});\n\nconst lightScoreMeter = (\n    score: number,\n    bureau: 'crif' | 'experian' | 'equifax',\n    oldScore: number,\n) => ({\n    colorMode: 'light',\n    reading: score,\n    oldReading: oldScore,\n    colorConfig: colorGuide.lightComponents.scoremeter,\n    type: getTypeAndText(score, bureau).type,\n    showIndicators: true,\n    scoreDesc: getTypeAndText(score, bureau).text,\n});\n\nexport const getScoreMeterConfig = {\n    lightScoreMeter,\n    darkScoreMeter,\n};\n"],"names":["Bureaus","scoreConfig","excellent","type","text","average","poor","getTypeAndText","score","bureau","experian","crif","darkScoreMeter","colorMode","reading","colorConfig","colorGuide","darkComponents","scoremeter","scoreDesc","lightScoreMeter","oldScore","oldReading","lightComponents","showIndicators","getScoreMeterConfig"],"mappings":";;;;;;AACYA,yBAAZ;;WAAYA;EAAAA;EAAAA;EAAAA;AAAAA,CAAAA,EAAAA,oBAAAA;;AAMZ,IAAMC,WAAW,GAAG;AAChBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,WADC;AAEPC,IAAAA,IAAI,EAAE,WAAA;GAHM;AAKhBC,EAAAA,OAAO,EAAE;AACLF,IAAAA,IAAI,EAAE,SADD;AAELC,IAAAA,IAAI,EAAE,MAAA;GAPM;AAShBE,EAAAA,IAAI,EAAE;AACFH,IAAAA,IAAI,EAAE,MADJ;AAEFC,IAAAA,IAAI,EAAE,MAAA;AAFJ,GAAA;AATU,CAApB,CAAA;AAeO,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgBC,MAAhB,EAAmC;EAC7D,IAAIA,MAAM,KAAKT,eAAO,CAACU,QAAnB,IAA+BF,KAAK,GAAG,GAA3C,EAAgD;IAC5C,OAAOA,KAAK,IAAI,GAAT,GAAeP,WAAW,CAACI,OAA3B,GAAqCJ,WAAW,CAACK,IAAxD,CAAA;GADJ,MAEO,IAAIG,MAAM,KAAKT,eAAO,CAACW,IAAnB,IAA2BH,KAAK,GAAG,GAAvC,EAA4C;IAC/C,OAAOA,KAAK,IAAI,GAAT,GAAeP,WAAW,CAACI,OAA3B,GAAqCJ,WAAW,CAACK,IAAxD,CAAA;AACH,GAFM,MAEA,IAAIE,KAAK,GAAG,GAAZ,EAAiB;IACpB,OAAOA,KAAK,IAAI,GAAT,GAAeP,WAAW,CAACI,OAA3B,GAAqCJ,WAAW,CAACK,IAAxD,CAAA;AACH,GAAA;;EAED,OAAOL,WAAW,CAACC,SAAnB,CAAA;AACH,EAVM;;AAYP,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAACJ,KAAD,EAAgBC,MAAhB,EAAA;EAAA,OAA6D;AAChFI,IAAAA,SAAS,EAAE,MADqE;AAEhFC,IAAAA,OAAO,EAAEN,KAFuE;AAGhFO,IAAAA,WAAW,EAAEC,iBAAU,CAACC,cAAX,CAA0BC,UAHyC;IAIhFf,IAAI,EAAEI,cAAc,CAACC,KAAD,EAAQC,MAAR,CAAd,CAA8BN,IAJ4C;AAKhFgB,IAAAA,SAAS,EAAEZ,cAAc,CAACC,KAAD,EAAQC,MAAR,CAAd,CAA8BL,IAAAA;GALtB,CAAA;AAAA,CAAvB,CAAA;;AAQA,IAAMgB,eAAe,GAAG,SAAlBA,eAAkB,CACpBZ,KADoB,EAEpBC,MAFoB,EAGpBY,QAHoB,EAAA;EAAA,OAIlB;AACFR,IAAAA,SAAS,EAAE,OADT;AAEFC,IAAAA,OAAO,EAAEN,KAFP;AAGFc,IAAAA,UAAU,EAAED,QAHV;AAIFN,IAAAA,WAAW,EAAEC,iBAAU,CAACO,eAAX,CAA2BL,UAJtC;IAKFf,IAAI,EAAEI,cAAc,CAACC,KAAD,EAAQC,MAAR,CAAd,CAA8BN,IALlC;AAMFqB,IAAAA,cAAc,EAAE,IANd;AAOFL,IAAAA,SAAS,EAAEZ,cAAc,CAACC,KAAD,EAAQC,MAAR,CAAd,CAA8BL,IAAAA;GAXrB,CAAA;AAAA,CAAxB,CAAA;;AAcO,IAAMqB,mBAAmB,GAAG;AAC/BL,EAAAA,eAAe,EAAfA,eAD+B;AAE/BR,EAAAA,cAAc,EAAdA,cAAAA;AAF+B;;;;;"}