'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PortalCompat = require('../../../node_modules/react-portal/es/PortalCompat.js');
require('../../../node_modules/react-portal/es/PortalWithState.js');
var index = require('../../Helpers/index.js');
require('../../../primitives/index.js');
var index$1 = require('../../Typography/index.js');
var styles = require('../styles.js');
var index$2 = require('../../../utils/index.js');
var toasts = require('../../../primitives/toasts.js');
var typography = require('../../../primitives/typography.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["id"];

var generateId = function generateId() {
  return Math.random().toString(36).substring(2, 10);
};

var DEFAULT_MSG = 'Something went wrong!';
var DEFAULT_TYPE = 'error';

var ToastIcon = function ToastIcon(_ref) {
  var icon = _ref.icon;
  if (!icon) return null;
  return /*#__PURE__*/React__default["default"].createElement(styles.Icon, {
    src: icon
  });
};

var Toast = function Toast(props) {
  var id = props.id,
      type = props.type,
      _props$content = props.content,
      content = _props$content === void 0 ? DEFAULT_MSG : _props$content,
      _props$colorConfig = props.colorConfig,
      colorConfig = _props$colorConfig === void 0 ? toasts.getToastColor(type !== null && type !== void 0 ? type : DEFAULT_TYPE) : _props$colorConfig,
      _props$textStyle = props.textStyle,
      textStyle = _props$textStyle === void 0 ? _rollupPluginBabelHelpers.objectSpread2({}, typography.typographyGuide.toast) : _props$textStyle,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? true : _props$fullWidth,
      _props$dismissOnClick = props.dismissOnClick,
      dismissOnClick = _props$dismissOnClick === void 0 ? false : _props$dismissOnClick,
      description = props.description,
      icon = props.icon,
      removeToast = props.removeToast,
      autoCloseTime = props.autoCloseTime;
  return /*#__PURE__*/React__default["default"].createElement(styles.ToastItem, {
    background: colorConfig.background,
    autoCloseTime: autoCloseTime,
    fullWidth: fullWidth,
    onClick: function onClick() {
      return dismissOnClick && removeToast && id ? removeToast(id) : null;
    }
  }, /*#__PURE__*/React__default["default"].createElement(index.Column, null, /*#__PURE__*/React__default["default"].createElement(index$1["default"], _rollupPluginBabelHelpers["extends"]({}, textStyle.heading, {
    color: colorConfig.color
  }), content), description ? /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(index.HorizontalSpacer, {
    n: 1
  }), /*#__PURE__*/React__default["default"].createElement(index$1["default"], _rollupPluginBabelHelpers["extends"]({}, textStyle.description, {
    color: index$2.hexToRGBA(colorConfig === null || colorConfig === void 0 ? void 0 : colorConfig.color, 0.5)
  }), description)) : null), /*#__PURE__*/React__default["default"].createElement(ToastIcon, {
    icon: icon
  }));
};
var ToastPortal = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _useState = React.useState([]),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      toastList = _useState2[0],
      setToastList = _useState2[1];

  var _useState3 = React.useState(''),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      removeId = _useState4[0],
      setRemoveId = _useState4[1];

  React.useImperativeHandle(ref, function () {
    return {
      addToast: function addToast(options) {
        setToastList([].concat(_rollupPluginBabelHelpers.toConsumableArray(toastList), [_rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, options), {}, {
          id: generateId()
        })]));
      }
    };
  });

  var removeToast = function removeToast(id) {
    if (id) {
      setToastList(function (toasts) {
        return toasts.filter(function (toast) {
          return toast.id !== id;
        });
      });
    }
  };

  React.useEffect(function () {
    if (removeId) {
      removeToast(removeId);
    }
  }, [removeId]);
  React.useEffect(function () {
    if (toastList.length) {
      var _toastList = toastList[toastList.length - 1],
          id = _toastList.id,
          autoCloseTime = _toastList.autoCloseTime;
      setTimeout(function () {
        setRemoveId(id);
      }, autoCloseTime || 3000);
    }
  }, [toastList]);
  if (!toastList) return null;
  if (toastList && !toastList.length) return null;
  return /*#__PURE__*/React__default["default"].createElement(PortalCompat["default"], null, /*#__PURE__*/React__default["default"].createElement("div", null, toastList.map(function (toastItemData) {
    var id = toastItemData.id,
        propsToFwd = _rollupPluginBabelHelpers.objectWithoutProperties(toastItemData, _excluded);

    return /*#__PURE__*/React__default["default"].createElement(Toast, _rollupPluginBabelHelpers["extends"]({
      key: id,
      id: id
    }, propsToFwd, {
      removeToast: removeToast
    }));
  })));
});

exports.Toast = Toast;
exports.ToastPortal = ToastPortal;
//# sourceMappingURL=ToastPortal.js.map
