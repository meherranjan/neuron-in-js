'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var index = require('../utils/index.js');
var opacity = require('./opacity.js');

exports.mainColors = Object.freeze({
  black: '#0d0d0d',
  white: '#ffffff',
  red: '#EE4D37',
  yellow: '#F08D32',
  blue: '#144CC7',
  green: '#06C270'
});
exports.colorPalette = Object.freeze({
  white: {
    50: '#E0E0E0',
    70: '#EFEFEF',
    90: '#FBFBFB'
  },
  popWhite: {
    100: '#D2D2D2',
    200: '#E0E0E0',
    300: '#EFEFEF',
    400: '#FBFBFB',
    500: '#ffffff'
  },
  popBlack: {
    100: '#8A8A8A',
    200: '#3D3D3D',
    300: '#161616',
    400: '#121212',
    500: '#0d0d0d'
  },
  black: {
    50: '#8A8A8A',
    70: '#3D3D3D',
    90: '#161616',
    100: '#121212'
  },
  poliPurple: {
    100: '#E8DFFF',
    200: '#D2C2FF',
    300: '#B49AFF',
    400: '#9772FF',
    500: '#6A35FF',
    600: '#4A25B3',
    700: '#351A80',
    800: '#20104D'
  },
  rss: {
    100: '#FFEFE6',
    200: '#FFDBC7',
    300: '#FFC3A2',
    400: '#FFAB7C',
    500: '#FF8744',
    600: '#B35F30',
    700: '#804322',
    800: '#4D2914'
  },
  pinkPong: {
    100: '#FFE1E9',
    200: '#FFC6D4',
    300: '#FFA0B7',
    400: '#FF7B9A',
    500: '#FF426F',
    600: '#B32E4E',
    700: '#802138',
    800: '#4D1421'
  },
  mannna: {
    100: '#FFF8E5',
    200: '#FFEFC7',
    300: '#FFE5A2',
    400: '#FFDB7D',
    500: '#FFCB45',
    600: '#B38E30',
    700: '#806623',
    800: '#4D3D15'
  },
  neoPaccha: {
    100: '#FBFFE6',
    200: '#F7FFC6',
    300: '#F2FF9F',
    400: '#EDFE79',
    500: '#E5FE40',
    600: '#A0B22D',
    700: '#727F20',
    800: '#454C13'
  },
  yoyo: {
    100: '#F4E5FF',
    200: '#E5C5FF',
    300: '#D59FFF',
    400: '#C379FF',
    500: '#AA3FFF',
    600: '#772CB3',
    700: '#552080',
    800: '#33134D'
  },
  error: {
    100: '#FCE2DD',
    200: '#F6A69B',
    300: '#F47564',
    400: '#F05E4B',
    500: '#EE4D37'
  },
  warning: {
    100: '#FBDDC2',
    200: '#F8C699',
    300: '#F5AC6A',
    400: '#F29947',
    500: '#F08D32'
  },
  info: {
    100: '#C2D0F2',
    200: '#89A5E3',
    300: '#3F6FD9',
    400: '#2C5ECD',
    500: '#144CC7'
  },
  success: {
    100: '#E6F9F1',
    200: '#83E0B8',
    300: '#4FE3A3',
    400: '#1FC87F',
    500: '#06C270'
  }
});

var getDarkThemedColors = function getDarkThemedColors() {
  return {
    font: {
      heading: index.hexToRGBA(exports.mainColors.white, opacity.FontOpacity.HEADING),
      subHeading: index.hexToRGBA(exports.mainColors.white, opacity.FontOpacity.SUB_HEADING),
      bodyText: index.hexToRGBA(exports.mainColors.white, opacity.FontOpacity.BODY_TEXT),
      bodyTextLighter: index.hexToRGBA(exports.mainColors.white, opacity.FontOpacity.BODY_TEXT_LIGHTER)
    },
    containerCard: {
      background: exports.colorPalette.black[100],
      stroke: 'rgba(255,255,255,0.1)'
    },
    bottomSheet: {},
    toast: {
      success: {
        background: exports.mainColors.green,
        color: '#F8F8F8'
      },
      warning: {
        background: exports.mainColors.yellow,
        color: '#F8F8F8'
      },
      error: {
        background: exports.mainColors.red,
        color: '#F8F8F8'
      }
    },
    searchBar: {
      border: exports.colorPalette.black[70],
      activeBorder: exports.mainColors.white,
      backgroundColor: exports.colorPalette.popBlack[400],
      closeIcon: exports.colorPalette.popWhite[100]
    },
    tags: {
      warning: {
        background: exports.mainColors.yellow,
        color: exports.colorPalette.white[90]
      },
      error: {
        background: exports.mainColors.red,
        color: exports.colorPalette.white[90]
      },
      success: {
        background: exports.mainColors.green,
        color: exports.colorPalette.white[90]
      },
      info: {
        background: exports.mainColors.blue,
        color: exports.colorPalette.white[90]
      }
    },
    checkbox: {
      background: exports.mainColors.black,
      border: exports.mainColors.white,
      leftPlunk: exports.colorPalette.black[50],
      topPlunk: exports.colorPalette.black[70]
    },
    inputFields: {
      textColor: index.hexToRGBA(exports.mainColors.white, opacity.FontOpacity.HEADING),
      labelColor: index.hexToRGBA(exports.mainColors.white, opacity.FontOpacity.BODY_TEXT),
      caretColor: exports.mainColors.blue,
      errorColor: exports.mainColors.red,
      placeholderColor: index.hexToRGBA(exports.mainColors.white, 0.3)
    },
    toggle: {
      on: {
        switchBackground: '#B4EDD4',
        switchBorder: exports.mainColors.white,
        buttonBackground: '#38b36f',
        buttonBorder: '#B4EDD4',
        buttonMarkBackground: exports.mainColors.white
      },
      off: {
        switchBackground: '#0a0a0a',
        switchBorder: exports.mainColors.white,
        buttonBackground: exports.mainColors.white,
        buttonBorder: '#0a0a0a',
        buttonMarkBackground: exports.colorPalette.white[50]
      }
    },
    radio: {
      background: exports.mainColors.black,
      border: exports.mainColors.white,
      plunk: exports.colorPalette.black[50],
      dotBackground: exports.mainColors.black,
      containerConfig: {
        color: exports.mainColors.white,
        backgroundColor: exports.colorPalette.black[100],
        borderColor: index.hexToRGBA(exports.mainColors.white, 0.1),
        activeBackgroundColor: exports.colorPalette.poliPurple[500],
        activeBorderColor: '#2C5ECD'
      }
    },
    dropdown: {
      withLabel: {
        text: index.hexToRGBA(exports.mainColors.white, 0.5),
        border: index.hexToRGBA(exports.mainColors.white, 0.1),
        chevron: index.hexToRGBA(exports.mainColors.white, 0.5)
      },
      withoutLabel: {
        text: index.hexToRGBA(exports.mainColors.white, 0.5),
        border: exports.mainColors.white,
        chevron: exports.mainColors.white
      }
    },
    scoremeter: {
      meterStrokeColor: {
        excellent: exports.mainColors.green,
        average: exports.colorPalette.neoPaccha[400],
        poor: exports.colorPalette.warning[400]
      },
      meterStrokeBackground: exports.mainColors.black,
      meterBorderColor: exports.colorPalette.popBlack[200],
      dotColor: '',
      indicatorColors: {
        neutral: '#e2e2e2',
        increment: '#5CDDBE',
        decrement: '#FFB098'
      },
      scoreContainerBackground: exports.colorPalette.popBlack[300],
      scoreContainerBorder: exports.mainColors.black,
      scoreColor: exports.mainColors.white
    },
    buttons: {
      primary: {
        backgroundColor: exports.mainColors.black,
        color: exports.mainColors.white,
        edgeColors: {
          bottom: exports.colorPalette.black[70],
          right: exports.colorPalette.black[50],
          top: exports.colorPalette.popBlack[200],
          left: exports.colorPalette.popBlack[100]
        },
        disabledColors: {
          backgroundColor: exports.colorPalette.black[50],
          color: index.hexToRGBA(exports.mainColors.white, 0.5),
          edgeColors: {
            top: 'transparent',
            left: 'transparent',
            right: exports.colorPalette.white[70],
            bottom: exports.colorPalette.white[50]
          }
        }
      },
      secondary: {
        backgroundColor: exports.mainColors.white,
        color: exports.mainColors.black,
        borderColor: exports.mainColors.black,
        edgeColors: {
          bottom: exports.colorPalette.black[50],
          right: exports.colorPalette.white[50],
          left: exports.colorPalette.white[50],
          top: '#C7C7C7'
        },
        disabledColors: {
          backgroundColor: exports.mainColors.white,
          color: index.hexToRGBA(exports.mainColors.black, 0.3),
          borderColor: index.hexToRGBA(exports.mainColors.black, 0.3),
          edgeColors: {
            top: 'transparent',
            left: 'transparent',
            right: 'transparent',
            bottom: 'transparent'
          }
        }
      }
    }
  };
};

var getLightThemedColors = function getLightThemedColors() {
  return {
    font: {
      heading: index.hexToRGBA(exports.mainColors.black, opacity.FontOpacity.HEADING),
      subHeading: index.hexToRGBA(exports.mainColors.black, opacity.FontOpacity.SUB_HEADING),
      bodyText: index.hexToRGBA(exports.mainColors.black, opacity.FontOpacity.BODY_TEXT),
      bodyTextLighter: index.hexToRGBA(exports.mainColors.black, opacity.FontOpacity.BODY_TEXT_LIGHTER)
    },
    containerCard: {
      background: exports.colorPalette.black[100],
      stroke: 'rgba(255,255,255,0.1)'
    },
    searchBar: {
      border: exports.colorPalette.white[50],
      activeBorder: exports.mainColors.black,
      backgroundColor: exports.mainColors.white,
      closeIcon: exports.colorPalette.white[50]
    },
    bottomSheet: {},
    toast: {
      success: {
        background: exports.mainColors.green,
        color: '#F8F8F8'
      },
      warning: {
        background: exports.mainColors.yellow,
        color: '#F8F8F8'
      },
      error: {
        background: exports.mainColors.red,
        color: '#F8F8F8'
      }
    },
    dropdown: {
      withLabel: {
        text: index.hexToRGBA(exports.mainColors.black, 0.5),
        border: index.hexToRGBA(exports.mainColors.black, 0.1),
        chevron: index.hexToRGBA(exports.mainColors.black, 0.5)
      },
      withoutLabel: {
        text: index.hexToRGBA(exports.mainColors.black, 0.5),
        border: exports.mainColors.black,
        chevron: exports.mainColors.black
      }
    },
    scoremeter: {
      meterStrokeColor: {
        excellent: exports.mainColors.green,
        average: exports.colorPalette.neoPaccha[400],
        poor: exports.colorPalette.warning[400]
      },
      meterStrokeBackground: 'transparent',
      meterBorderColor: exports.colorPalette.popWhite[200],
      dotColor: exports.colorPalette.popBlack[300],
      indicatorColors: {
        neutral: '#e2e2e2',
        increment: '#5CDDBE',
        decrement: '#FFB098'
      },
      scoreContainerBackground: exports.colorPalette.popWhite[300],
      scoreContainerBorder: exports.colorPalette.popWhite[400],
      scoreColor: exports.mainColors.black
    },
    tags: {
      warning: {
        background: '#FEF4EB',
        color: exports.mainColors.yellow
      },
      error: {
        background: '#FDEDEB',
        color: exports.mainColors.red
      },
      success: {
        background: '#E6F9F1',
        color: exports.mainColors.green
      },
      info: {
        background: '#EBF1FE',
        color: exports.mainColors.blue
      }
    },
    checkbox: {
      background: exports.mainColors.white,
      border: exports.mainColors.black,
      leftPlunk: exports.colorPalette.black[50],
      topPlunk: exports.colorPalette.white[50]
    },
    inputFields: {
      textColor: index.hexToRGBA(exports.mainColors.black, opacity.FontOpacity.HEADING),
      labelColor: index.hexToRGBA(exports.mainColors.black, opacity.FontOpacity.BODY_TEXT),
      caretColor: exports.mainColors.blue,
      errorColor: exports.mainColors.red,
      placeholderColor: index.hexToRGBA(exports.mainColors.black, 0.3)
    },
    buttons: {
      primary: {
        backgroundColor: exports.mainColors.white,
        color: exports.mainColors.black,
        edgeColors: {
          bottom: exports.colorPalette.black[50],
          right: exports.colorPalette.white[50],
          top: exports.colorPalette.popBlack[200],
          left: exports.colorPalette.popBlack[100]
        },
        disabledColors: {
          backgroundColor: exports.colorPalette.popBlack[100],
          color: index.hexToRGBA(exports.mainColors.white, 0.5),
          edgeColors: {
            top: 'transparent',
            left: 'transparent',
            right: '#B6B6B6',
            bottom: exports.colorPalette.popBlack[200]
          }
        }
      },
      secondary: {
        backgroundColor: exports.mainColors.black,
        color: exports.mainColors.white,
        borderColor: exports.mainColors.white,
        edgeColors: {
          bottom: exports.colorPalette.black[50],
          top: '#262626',
          right: exports.colorPalette.white[50],
          left: '#404040'
        },
        disabledColors: {
          backgroundColor: exports.mainColors.black,
          color: index.hexToRGBA(exports.mainColors.white, 0.3),
          borderColor: index.hexToRGBA(exports.mainColors.white, 0.3),
          edgeColors: {
            top: 'transparent',
            left: 'transparent',
            right: 'transparent',
            bottom: 'transparent'
          }
        }
      }
    },
    toggle: {
      on: {
        switchBackground: '#CAFFE2',
        switchBorder: '#0a0a0a',
        buttonBackground: '#38b36f',
        buttonBorder: '#F7F7F7',
        buttonMarkBackground: exports.mainColors.white
      },
      off: {
        switchBackground: exports.mainColors.white,
        switchBorder: '#0a0a0a',
        buttonBackground: exports.colorPalette.white[50],
        buttonBorder: exports.mainColors.white,
        buttonMarkBackground: exports.mainColors.white
      }
    },
    radio: {
      background: exports.mainColors.white,
      border: exports.mainColors.black,
      plunk: exports.colorPalette.black[50],
      dotBackground: exports.mainColors.white,
      containerConfig: {
        color: exports.mainColors.black,
        backgroundColor: exports.colorPalette.black[100],
        borderColor: index.hexToRGBA(exports.mainColors.white, 0.1),
        activeBackgroundColor: exports.colorPalette.poliPurple[500],
        activeBorderColor: '#2C5ECD'
      }
    }
  };
};

var getColorGuide = function getColorGuide() {
  return {
    mainAppBackground: exports.mainColors.black,
    darkComponents: getDarkThemedColors(),
    lightComponents: getLightThemedColors()
  };
};

exports.colorGuide = getColorGuide();
var extend = function extend(themeOverwrite) {
  var _themeOverwrite$mainC = themeOverwrite.mainColors,
      userMainColors = _themeOverwrite$mainC === void 0 ? {} : _themeOverwrite$mainC,
      _themeOverwrite$color = themeOverwrite.colorGuide,
      userColorGuide = _themeOverwrite$color === void 0 ? {} : _themeOverwrite$color,
      _themeOverwrite$color2 = themeOverwrite.colorPalette,
      userColorPalette = _themeOverwrite$color2 === void 0 ? {} : _themeOverwrite$color2;
  exports.mainColors = Object.freeze(index.mergeDeep({}, exports.mainColors, userMainColors));
  exports.colorPalette = Object.freeze(index.mergeDeep({}, exports.colorPalette, userColorPalette));
  exports.colorGuide = Object.freeze(index.mergeDeep({}, getColorGuide(), userColorGuide));
};

exports.extend = extend;
//# sourceMappingURL=colors.js.map
