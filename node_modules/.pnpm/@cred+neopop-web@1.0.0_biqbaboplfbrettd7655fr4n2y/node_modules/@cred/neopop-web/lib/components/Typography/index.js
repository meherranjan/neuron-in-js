'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var styles = require('./styles.js');
var types = require('./types.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["children", "style", "as"];

var Typography = function Typography(props) {
  var children = props.children,
      style = props.style,
      as = props.as,
      details = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);

  switch (as) {
    case 'p':
      return /*#__PURE__*/React__default["default"].createElement(styles.ParagraphWrapper, _rollupPluginBabelHelpers["extends"]({
        className: details.fontType === types.FontType.SERIF_HEADING ? 'font serif' : 'font sans-serif',
        style: style
      }, details), children);

    case 'span':
      return /*#__PURE__*/React__default["default"].createElement(styles.SpanWrapper, _rollupPluginBabelHelpers["extends"]({
        className: details.fontType === types.FontType.SERIF_HEADING ? 'font serif' : 'font sans-serif',
        style: style
      }, details), children);

    default:
      return /*#__PURE__*/React__default["default"].createElement(styles.TypographyWrapper, _rollupPluginBabelHelpers["extends"]({
        className: details.fontType === types.FontType.SERIF_HEADING ? 'font serif' : 'font sans-serif',
        style: style
      }, details), children);
  }
};

exports["default"] = Typography;
//# sourceMappingURL=index.js.map
