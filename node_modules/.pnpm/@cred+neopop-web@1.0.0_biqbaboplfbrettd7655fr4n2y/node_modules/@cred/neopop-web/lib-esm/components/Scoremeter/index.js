import { slicedToArray as _slicedToArray, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default from 'react';
import Typography from '../Typography/index.js';
import '../../primitives/index.js';
import { MeterContainer, MeterWrapper, MeterSVG, ScoreContainer, Legend } from './styles.js';
import { DEFAULT_MODE, DEFAULT_TYPE, LOWER_THRESHOLD } from './types.js';
import { Row } from '../Helpers/index.js';
import { colorGuide } from '../../primitives/colors.js';
import { fontNameSpaces } from '../../primitives/typography.js';

var getScoremeterReading = function getScoremeterReading(reading, lowerLimit, upperLimit) {
  return (75 - 0) / (upperLimit - lowerLimit) * (reading - upperLimit) + 75;
};

var getDotRotateDegree = function getDotRotateDegree(reading, lowerLimit, upperLimit) {
  return 2.7 * ((reading - lowerLimit) * 100 / (upperLimit - lowerLimit)) + 47;
};

var ScoreMeter = function ScoreMeter(props) {
  var _colorConfig$indicato, _colorConfig$indicato2, _colorConfig$indicato3, _colorConfig$indicato4;

  var reading = props.reading,
      oldReading = props.oldReading,
      _props$colorMode = props.colorMode,
      colorMode = _props$colorMode === void 0 ? DEFAULT_MODE : _props$colorMode,
      _props$type = props.type,
      type = _props$type === void 0 ? DEFAULT_TYPE : _props$type,
      _props$colorConfig = props.colorConfig,
      colorConfig = _props$colorConfig === void 0 ? colorGuide[colorMode == 'light' ? 'lightComponents' : 'darkComponents'].scoremeter : _props$colorConfig,
      scoreDesc = props.scoreDesc,
      showIndicators = props.showIndicators,
      _props$lowerLimit = props.lowerLimit,
      lowerLimit = _props$lowerLimit === void 0 ? 300 : _props$lowerLimit,
      _props$upperLimit = props.upperLimit,
      upperLimit = _props$upperLimit === void 0 ? 900 : _props$upperLimit,
      _props$showLegends = props.showLegends,
      showLegends = _props$showLegends === void 0 ? true : _props$showLegends;
  var sanitizedReading = reading < 0 ? LOWER_THRESHOLD : reading;
  var sanitizedOldReading = oldReading ? oldReading < 0 ? LOWER_THRESHOLD : oldReading : LOWER_THRESHOLD;

  var _React$useState = React__default.useState(sanitizedReading),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      score = _React$useState2[0],
      setScore = _React$useState2[1];

  var _React$useState3 = React__default.useState(sanitizedOldReading),
      _React$useState4 = _slicedToArray(_React$useState3, 1),
      oldScore = _React$useState4[0];

  var _React$useState5 = React__default.useState(false),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      animate = _React$useState6[0],
      setAnimate = _React$useState6[1];

  var _React$useState7 = React__default.useState(false),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      scoreUpdate = _React$useState8[0],
      setScoreUpdate = _React$useState8[1];

  var differenceScore = sanitizedOldReading ? sanitizedReading - sanitizedOldReading : sanitizedReading;
  var differential = differenceScore < 0 ? -1 : 1;
  React__default.useEffect(function () {
    if (sanitizedOldReading && sanitizedReading !== sanitizedOldReading) {
      setScore(sanitizedOldReading);
      setAnimate(function (prev) {
        return !prev;
      });
    }
  }, []);
  React__default.useEffect(function () {
    if (score !== sanitizedReading) {
      setTimeout(function () {
        setScoreUpdate(true);
      }, 500);
    }
  }, [animate]);
  React__default.useEffect(function () {
    if (Math.floor(sanitizedReading) !== Math.floor(score)) {
      setTimeout(function () {
        setScore(function (prevScore) {
          return prevScore + differential;
        });
        setScoreUpdate(function (prev) {
          return !prev;
        });
      }, 20);
    }
  }, [scoreUpdate]);
  var scoreReading = getScoremeterReading(score, lowerLimit, upperLimit);
  var dotRotateDegree = getDotRotateDegree(score, lowerLimit, upperLimit);
  return /*#__PURE__*/React__default.createElement(Row, null, /*#__PURE__*/React__default.createElement(MeterContainer, null, /*#__PURE__*/React__default.createElement(MeterWrapper, {
    colorConfig: colorConfig,
    type: type,
    showIndicators: showIndicators
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "dot",
    style: {
      transform: "rotateZ(".concat(dotRotateDegree, "deg) translateY(80px)")
    }
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "meter"
  }, /*#__PURE__*/React__default.createElement(MeterSVG, {
    height: "140",
    width: "140",
    viewBox: "0 0 20 20"
  }, /*#__PURE__*/React__default.createElement("circle", {
    r: "10",
    cx: "10",
    cy: "10",
    fill: "none"
  }), score > oldScore ? /*#__PURE__*/React__default.createElement("circle", {
    r: "5",
    cx: "10",
    cy: "10",
    fill: "none",
    stroke: colorConfig === null || colorConfig === void 0 ? void 0 : colorConfig.meterStrokeColor[type !== null && type !== void 0 ? type : 'excellent'],
    strokeWidth: "10",
    strokeDasharray: "".concat(scoreReading * 31.42 / 100, " 31.42")
  }) : /*#__PURE__*/React__default.createElement("circle", {
    r: "5",
    cx: "10",
    cy: "10",
    fill: "none",
    stroke: colorConfig === null || colorConfig === void 0 ? void 0 : colorConfig.meterStrokeColor[type !== null && type !== void 0 ? type : 'excellent'],
    strokeWidth: "10",
    strokeDasharray: "".concat((scoreReading + 0.75) * 31.42 / 100, " 31.42")
  }))), /*#__PURE__*/React__default.createElement(ScoreContainer, {
    colorConfig: colorConfig,
    type: type,
    showIndicators: showIndicators
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "score"
  }, /*#__PURE__*/React__default.createElement(Typography, _extends({}, fontNameSpaces.th28eb, {
    style: {
      color: 'inherit'
    }
  }), sanitizedOldReading ? score : sanitizedReading), scoreDesc ? /*#__PURE__*/React__default.createElement(Typography, _extends({}, fontNameSpaces.tc8b, {
    color: colorConfig === null || colorConfig === void 0 ? void 0 : colorConfig.meterStrokeColor[type],
    style: {
      marginTop: '5px'
    }
  }), scoreDesc) : null, showIndicators ? /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("svg", {
    width: "15",
    height: "24",
    viewBox: "0 0 14 10"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M7.368 0L0 10h14z",
    fill: score > oldScore ? colorConfig === null || colorConfig === void 0 ? void 0 : (_colorConfig$indicato = colorConfig.indicatorColors) === null || _colorConfig$indicato === void 0 ? void 0 : _colorConfig$indicato.increment : colorConfig === null || colorConfig === void 0 ? void 0 : (_colorConfig$indicato2 = colorConfig.indicatorColors) === null || _colorConfig$indicato2 === void 0 ? void 0 : _colorConfig$indicato2.neutral,
    fillRule: "evenodd"
  })), /*#__PURE__*/React__default.createElement("svg", {
    width: "15",
    height: "24",
    viewBox: "0 0 14 10"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M7.368 10L0 0h14z",
    fill: score < oldScore ? colorConfig === null || colorConfig === void 0 ? void 0 : (_colorConfig$indicato3 = colorConfig.indicatorColors) === null || _colorConfig$indicato3 === void 0 ? void 0 : _colorConfig$indicato3.decrement : colorConfig === null || colorConfig === void 0 ? void 0 : (_colorConfig$indicato4 = colorConfig.indicatorColors) === null || _colorConfig$indicato4 === void 0 ? void 0 : _colorConfig$indicato4.neutral,
    fillRule: "evenodd"
  }))) : ''))), showLegends ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Legend, null, /*#__PURE__*/React__default.createElement("div", {
    className: "dot"
  }, "\xB7"), /*#__PURE__*/React__default.createElement(Typography, _extends({}, fontNameSpaces.tb14sb, {
    color: "#4b4f52"
  }), lowerLimit)), /*#__PURE__*/React__default.createElement(Legend, {
    right: true
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "dot"
  }, "\xB7"), /*#__PURE__*/React__default.createElement(Typography, _extends({}, fontNameSpaces.tb14sb, {
    color: "#4b4f52"
  }), upperLimit))) : null));
};

export { ScoreMeter as default };
//# sourceMappingURL=index.js.map
