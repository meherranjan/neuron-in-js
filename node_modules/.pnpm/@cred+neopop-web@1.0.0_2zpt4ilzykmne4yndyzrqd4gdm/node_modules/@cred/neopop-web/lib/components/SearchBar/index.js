'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var index$1 = require('../Helpers/index.js');
var index = require('../InputField/index.js');
require('../../primitives/index.js');
var styles = require('./styles.js');
var index$2 = require('../../utils/index.js');
var typography = require('../../primitives/typography.js');
var colors = require('../../primitives/colors.js');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

var SearchBar = function SearchBar(props) {
  var iconUrl = props.iconUrl,
      colorConfig = props.colorConfig,
      _props$textStyle = props.textStyle,
      textStyle = _props$textStyle === void 0 ? typography.typographyGuide.searchBar.input : _props$textStyle,
      placeholder = props.placeholder,
      handleSearchInput = props.handleSearchInput,
      colorMode = props.colorMode,
      inputColorConfig = props.inputColorConfig,
      onSubmit = props.onSubmit;

  var _React$useState = React__namespace.useState(''),
      _React$useState2 = _rollupPluginBabelHelpers.slicedToArray(_React$useState, 2),
      searchText = _React$useState2[0],
      setSearchText = _React$useState2[1];

  var _React$useState3 = React__namespace.useState(false),
      _React$useState4 = _rollupPluginBabelHelpers.slicedToArray(_React$useState3, 2),
      isActive = _React$useState4[0],
      setIsActive = _React$useState4[1];

  var inputRef = React__namespace.useRef(null);

  var handleChange = function handleChange(event) {
    var _event$target$value, _event$target;

    var value = (_event$target$value = event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value) !== null && _event$target$value !== void 0 ? _event$target$value : '';
    setSearchText(value);
    handleSearchInput(value);
  };

  var handleSubmit = function handleSubmit(e) {
    var _inputRef$current;

    e === null || e === void 0 ? void 0 : e.preventDefault();
    inputRef === null || inputRef === void 0 ? void 0 : (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.blur();
    onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
  };

  var clearData = function clearData() {
    setSearchText('');
    handleSearchInput('');
  };

  var defaultSearchBarColorConfig = colors.colorGuide[colorMode === 'light' ? 'lightComponents' : 'darkComponents'].searchBar;
  var defaultInputFieldColorConfig = colors.colorGuide[colorMode === 'light' ? 'lightComponents' : 'darkComponents'].inputFields;
  var searchColorConfig = index$2.isEmpty(colorConfig) ? defaultSearchBarColorConfig : colorConfig !== null && colorConfig !== void 0 ? colorConfig : defaultSearchBarColorConfig;
  var inputFieldColorConfig = index$2.isEmpty(inputColorConfig) ? defaultInputFieldColorConfig : inputColorConfig !== null && inputColorConfig !== void 0 ? inputColorConfig : defaultInputFieldColorConfig;
  return /*#__PURE__*/React__namespace.createElement(styles.SearchBarContainer, _rollupPluginBabelHelpers["extends"]({}, searchColorConfig, {
    className: isActive ? 'active' : '',
    onClick: function onClick() {
      return setIsActive(true);
    },
    onBlur: function onBlur() {
      setIsActive(false);
    }
  }), iconUrl ? /*#__PURE__*/React__namespace.createElement("img", {
    src: iconUrl,
    alt: "search",
    className: "icon"
  }) : null, /*#__PURE__*/React__namespace.createElement("div", {
    className: "input"
  }, /*#__PURE__*/React__namespace.createElement("form", {
    onSubmit: handleSubmit,
    style: {
      margin: '0',
      padding: '0'
    }
  }, /*#__PURE__*/React__namespace.createElement(index["default"], {
    inputRef: inputRef,
    autoFocus: isActive,
    textStyle: {
      input: textStyle,
      label: typography.typographyGuide.inputFields.label
    },
    placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : 'search',
    value: searchText,
    onChange: handleChange,
    colorConfig: inputFieldColorConfig
  }), /*#__PURE__*/React__namespace.createElement("input", {
    type: "submit",
    style: {
      display: 'none'
    }
  }))), searchText ? /*#__PURE__*/React__namespace.createElement(index$1.Cross, {
    color: searchColorConfig.closeIcon,
    onClick: clearData
  }) : null);
};

exports["default"] = SearchBar;
//# sourceMappingURL=index.js.map
