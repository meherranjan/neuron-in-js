{"version":3,"file":"index.js","sources":["../../../src/components/Helpers/index.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { mainColors } from '@primitives';\nimport * as React from 'react';\nimport { ChevronProps, Directions, PointerProps, CrossProps } from './types';\nimport { hexToRGBA } from '@utils';\n\nexport const Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    &.h-center {\n        align-items: center;\n    }\n    &.v-center {\n        justify-content: center;\n    }\n    &.v-justify {\n        justify-content: space-between;\n    }\n`;\n\nexport const Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    &.v-center {\n        align-items: center;\n    }\n    &.h-center {\n        justify-content: center;\n    }\n`;\n\nexport const PageContainer = styled.div`\n    background-color: ${mainColors.black};\n    min-height: calc(100vh - constant(safe-area-inset-top));\n    min-height: calc(100vh - env(safe-area-inset-top));\n    width: 100vw;\n    padding: 0px 15px 0px 30px;\n    padding-bottom: constant(safe-area-inset-bottom);\n    padding-bottom: env(safe-area-inset-bottom);\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const HorizontalDivider = styled.div`\n    background-color: ${({ color }) => color ?? hexToRGBA(mainColors.white, 0.1)};\n    margin: 0px;\n    width: 100%;\n    height: 1px;\n    position: relative;\n`;\n\ntype SpacerType = {\n    n: number;\n};\nexport const HorizontalSpacer = styled.div<SpacerType>`\n    margin-bottom: ${({ n }: SpacerType) => `calc(${n} * 5px)`};\n`;\n\nexport const VerticalSpacer = styled.div<SpacerType>`\n    margin-right: ${({ n }: SpacerType) => `calc(${n} * 5px)`};\n`;\n\nconst RotateDegrees = {\n    [Directions.NORTH]: '-90deg',\n    [Directions.SOUTH]: '90deg',\n    [Directions.EAST]: '0deg',\n    [Directions.WEST]: '180deg',\n};\n\nexport const Chevron = ({\n    color = mainColors.white,\n    direction = Directions.EAST,\n}: ChevronProps) => (\n    <svg\n        style={{ transform: `rotate(${RotateDegrees[direction ?? Directions.EAST]})` }}\n        width=\"8\"\n        height=\"11\"\n        viewBox=\"0 0 8 11\"\n        fill=\"none\"\n    >\n        <path d=\"M2 9.5L6 5.5L2 1.5\" stroke={color} strokeWidth=\"1.5\" strokeLinecap=\"square\" />\n    </svg>\n);\n\nexport const Pointer = ({\n    color = mainColors.white,\n    direction = Directions.EAST,\n    size = 'medium',\n    style,\n}: PointerProps) =>\n    size === 'small' ? (\n        <svg\n            style={{\n                transform: `rotate(${RotateDegrees[direction ?? Directions.EAST]})`,\n                ...style,\n            }}\n            width=\"13\"\n            height=\"9\"\n            viewBox=\"0 0 13 9\"\n            fill=\"none\"\n        >\n            <path\n                d=\"M1 3.74996H0.25V5.24996H1V3.74996ZM1 5.24996H11.9997V3.74996H1V5.24996ZM8.37874 0.5C8.37874 3.09998 10.4246 5.25 12.9997 5.25V3.75C11.299 3.75 9.87874 2.31829 9.87874 0.5L8.37874 0.5ZM12.9997 3.75C10.4246 3.75 8.37865 5.89999 8.37865 8.5H9.87865C9.87865 6.68173 11.299 5.25 12.9997 5.25V3.75Z\"\n                fill={color}\n            />\n        </svg>\n    ) : (\n        <svg\n            style={{\n                transform: `rotate(${RotateDegrees[direction ?? Directions.EAST]})`,\n                ...style,\n            }}\n            width=\"21\"\n            height=\"9\"\n            viewBox=\"0 0 21 9\"\n            fill=\"none\"\n        >\n            <path\n                d=\"M1 3.74996H0.25L0.25 5.24996L1 5.24996L1 3.74996ZM1 5.24996L20 5.24996V3.74996L1 3.74996L1 5.24996ZM16.379 0.5C16.379 3.09998 18.4249 5.25 21 5.25V3.75C19.2993 3.75 17.879 2.3183 17.879 0.5L16.379 0.5ZM21 3.75C18.4249 3.75 16.3789 5.89999 16.3789 8.5H17.8789C17.8789 6.68172 19.2993 5.25 21 5.25V3.75Z\"\n                fill={color}\n            />\n        </svg>\n    );\n\nexport const Cross = ({ color = mainColors.white, onClick }: CrossProps) => (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" onClick={onClick}>\n        <path d=\"M2 10L6 6L2 2\" stroke={color} strokeWidth=\"1.5\" strokeLinecap=\"square\" />\n        <path d=\"M10 10L6 6L10 2\" stroke={color} strokeWidth=\"1.5\" strokeLinecap=\"square\" />\n    </svg>\n);\n"],"names":["Row","styled","div","Column","PageContainer","mainColors","black","HorizontalDivider","color","hexToRGBA","white","HorizontalSpacer","n","VerticalSpacer","RotateDegrees","Directions","NORTH","SOUTH","EAST","WEST","Chevron","direction","transform","Pointer","size","style","_objectSpread","Cross","onClick"],"mappings":"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"}