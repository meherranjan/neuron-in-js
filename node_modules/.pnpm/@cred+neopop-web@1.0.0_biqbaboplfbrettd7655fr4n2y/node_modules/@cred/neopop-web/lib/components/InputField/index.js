'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var index = require('../Typography/index.js');
var styles = require('./styles.js');
var useScrollIntoView = require('../../hooks/useScrollIntoView.js');
var useAutoFocus = require('../../hooks/useAutoFocus.js');
require('../../primitives/index.js');
var index$1 = require('../../utils/index.js');
var typography = require('../../primitives/typography.js');
var colors = require('../../primitives/colors.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["id", "label", "colorMode", "isDisabled", "inputRef", "scrollIntoView", "autoFocus", "value", "colorConfig", "textStyle", "hasError", "errorMessage"];

var InputField = function InputField(props) {
  var _textStyle$label, _textStyle$input, _textStyle$input2;

  var id = props.id,
      label = props.label,
      colorMode = props.colorMode,
      isDisabled = props.isDisabled,
      inputRef = props.inputRef,
      scrollIntoView = props.scrollIntoView,
      autoFocus = props.autoFocus,
      value = props.value,
      colorConfig = props.colorConfig,
      textStyle = props.textStyle,
      hasError = props.hasError,
      _props$errorMessage = props.errorMessage,
      errorMessage = _props$errorMessage === void 0 ? 'error message' : _props$errorMessage,
      propsToFwd = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);

  var customRef = React__default["default"].useRef(null);
  var inputFields = typography.typographyGuide.inputFields;
  useScrollIntoView["default"]({
    scrollIntoView: scrollIntoView,
    ref: customRef
  });
  useAutoFocus["default"]({
    autoFocus: autoFocus,
    ref: customRef,
    currentValue: value
  });

  var getLabelColor = function getLabelColor() {
    if (hasError) {
      return colorConfig === null || colorConfig === void 0 ? void 0 : colorConfig.errorColor;
    }

    return colorConfig === null || colorConfig === void 0 ? void 0 : colorConfig.labelColor;
  };

  var labelText = function labelText() {
    if (hasError) {
      return errorMessage;
    }

    return label;
  };

  var defaultColorConfig = colors.colorGuide[colorMode === 'light' ? 'lightComponents' : 'darkComponents'].inputFields;
  var inputFieldColorConfig = index$1.isEmpty(colorConfig) ? defaultColorConfig : colorConfig !== null && colorConfig !== void 0 ? colorConfig : defaultColorConfig;
  return /*#__PURE__*/React__default["default"].createElement(styles.Container, null, label ? /*#__PURE__*/React__default["default"].createElement(styles.Label, {
    htmlFor: id
  }, /*#__PURE__*/React__default["default"].createElement(index["default"], _rollupPluginBabelHelpers["extends"]({}, (_textStyle$label = textStyle === null || textStyle === void 0 ? void 0 : textStyle.label) !== null && _textStyle$label !== void 0 ? _textStyle$label : inputFields.label, {
    color: getLabelColor()
  }), labelText())) : '', /*#__PURE__*/React__default["default"].createElement(index["default"], (_textStyle$input = textStyle === null || textStyle === void 0 ? void 0 : textStyle.input) !== null && _textStyle$input !== void 0 ? _textStyle$input : inputFields.text, /*#__PURE__*/React__default["default"].createElement(styles.Input, _rollupPluginBabelHelpers["extends"]({
    ref: function ref(_ref) {
      customRef.current = inputRef ? inputRef.current = _ref : _ref;
    },
    value: value,
    id: id,
    disabled: isDisabled,
    textColor: inputFieldColorConfig === null || inputFieldColorConfig === void 0 ? void 0 : inputFieldColorConfig.textColor,
    caretColor: inputFieldColorConfig === null || inputFieldColorConfig === void 0 ? void 0 : inputFieldColorConfig.caretColor,
    placeholderColor: inputFieldColorConfig === null || inputFieldColorConfig === void 0 ? void 0 : inputFieldColorConfig.placeholderColor,
    text: (_textStyle$input2 = textStyle === null || textStyle === void 0 ? void 0 : textStyle.input) !== null && _textStyle$input2 !== void 0 ? _textStyle$input2 : inputFields.text
  }, propsToFwd))));
};

exports["default"] = InputField;
//# sourceMappingURL=index.js.map
