{"version":3,"file":"index.js","sources":["../../../src/components/Scoremeter/index.tsx"],"sourcesContent":["import React from 'react';\nimport Typography from '@components/Typography';\nimport { colorGuide, fontNameSpaces } from '@primitives';\nimport { Legend, MeterContainer, MeterSVG, MeterWrapper, ScoreContainer } from './styles';\nimport { DEFAULT_MODE, DEFAULT_TYPE, LOWER_THRESHOLD, ScoremeterProps } from './types';\nimport { Row } from '@components/Helpers';\n\nconst getScoremeterReading = (reading: number, lowerLimit: number, upperLimit: number) =>\n    ((75 - 0) / (upperLimit - lowerLimit)) * (reading - upperLimit) + 75;\nconst getDotRotateDegree = (reading: number, lowerLimit: number, upperLimit: number) =>\n    2.7 * (((reading - lowerLimit) * 100) / (upperLimit - lowerLimit)) + 47;\n\nconst ScoreMeter = (props: ScoremeterProps) => {\n    const {\n        reading,\n        oldReading,\n        colorMode = DEFAULT_MODE,\n        type = DEFAULT_TYPE,\n        colorConfig = colorGuide[colorMode == 'light' ? 'lightComponents' : 'darkComponents']\n            .scoremeter,\n        scoreDesc,\n        showIndicators,\n        lowerLimit = 300,\n        upperLimit = 900,\n        showLegends = true,\n    } = props;\n\n    const sanitizedReading = reading < 0 ? LOWER_THRESHOLD : reading;\n    const sanitizedOldReading = oldReading\n        ? oldReading < 0\n            ? LOWER_THRESHOLD\n            : oldReading\n        : LOWER_THRESHOLD;\n    const [score, setScore] = React.useState(sanitizedReading);\n    const [oldScore] = React.useState(sanitizedOldReading);\n    const [animate, setAnimate] = React.useState(false);\n    const [scoreUpdate, setScoreUpdate] = React.useState(false);\n\n    const differenceScore = sanitizedOldReading\n        ? sanitizedReading - sanitizedOldReading\n        : sanitizedReading;\n    const differential = differenceScore < 0 ? -1 : 1;\n\n    React.useEffect(() => {\n        if (sanitizedOldReading && sanitizedReading !== sanitizedOldReading) {\n            setScore(sanitizedOldReading);\n            setAnimate((prev) => !prev);\n        }\n    }, []);\n\n    React.useEffect(() => {\n        if (score !== sanitizedReading) {\n            setTimeout(() => {\n                setScoreUpdate(true);\n            }, 500);\n        }\n    }, [animate]);\n\n    React.useEffect(() => {\n        if (Math.floor(sanitizedReading) !== Math.floor(score)) {\n            setTimeout(() => {\n                setScore((prevScore) => prevScore + differential);\n                setScoreUpdate((prev) => !prev);\n            }, 20);\n        }\n    }, [scoreUpdate]);\n\n    const scoreReading = getScoremeterReading(score, lowerLimit, upperLimit);\n    const dotRotateDegree = getDotRotateDegree(score, lowerLimit, upperLimit);\n\n    return (\n        <Row>\n            <MeterContainer>\n                <MeterWrapper colorConfig={colorConfig} type={type} showIndicators={showIndicators}>\n                    <div\n                        className=\"dot\"\n                        style={{ transform: `rotateZ(${dotRotateDegree}deg) translateY(80px)` }}\n                    />\n                    <div className=\"meter\">\n                        <MeterSVG height=\"140\" width=\"140\" viewBox=\"0 0 20 20\">\n                            <circle r=\"10\" cx=\"10\" cy=\"10\" fill=\"none\" />\n                            {score > oldScore ? (\n                                <circle\n                                    r=\"5\"\n                                    cx=\"10\"\n                                    cy=\"10\"\n                                    fill=\"none\"\n                                    stroke={colorConfig?.meterStrokeColor[type ?? 'excellent']}\n                                    strokeWidth=\"10\"\n                                    strokeDasharray={`${(scoreReading * 31.42) / 100} 31.42`}\n                                />\n                            ) : (\n                                <circle\n                                    r=\"5\"\n                                    cx=\"10\"\n                                    cy=\"10\"\n                                    fill=\"none\"\n                                    stroke={colorConfig?.meterStrokeColor[type ?? 'excellent']}\n                                    strokeWidth=\"10\"\n                                    strokeDasharray={`${\n                                        ((scoreReading + 0.75) * 31.42) / 100\n                                    } 31.42`}\n                                />\n                            )}\n                        </MeterSVG>\n                    </div>\n\n                    {/* Inside Meter */}\n                    <ScoreContainer\n                        colorConfig={colorConfig}\n                        type={type}\n                        showIndicators={showIndicators}\n                    >\n                        <div className=\"score\">\n                            <Typography {...fontNameSpaces.th28eb} style={{ color: 'inherit' }}>\n                                {sanitizedOldReading ? score : sanitizedReading}\n                            </Typography>\n                            {scoreDesc ? (\n                                <Typography\n                                    {...fontNameSpaces.tc8b}\n                                    color={colorConfig?.meterStrokeColor[type]}\n                                    style={{ marginTop: '5px' }}\n                                >\n                                    {scoreDesc}\n                                </Typography>\n                            ) : null}\n                            {showIndicators ? (\n                                <div>\n                                    <svg width=\"15\" height=\"24\" viewBox=\"0 0 14 10\">\n                                        <path\n                                            d=\"M7.368 0L0 10h14z\"\n                                            fill={\n                                                score > oldScore\n                                                    ? colorConfig?.indicatorColors?.increment\n                                                    : colorConfig?.indicatorColors?.neutral\n                                            }\n                                            fillRule=\"evenodd\"\n                                        />\n                                    </svg>\n                                    <svg width=\"15\" height=\"24\" viewBox=\"0 0 14 10\">\n                                        <path\n                                            d=\"M7.368 10L0 0h14z\"\n                                            fill={\n                                                score < oldScore\n                                                    ? colorConfig?.indicatorColors?.decrement\n                                                    : colorConfig?.indicatorColors?.neutral\n                                            }\n                                            fillRule=\"evenodd\"\n                                        />\n                                    </svg>\n                                </div>\n                            ) : (\n                                ''\n                            )}\n                        </div>\n                    </ScoreContainer>\n                </MeterWrapper>\n\n                {/* Legends */}\n                {showLegends ? (\n                    <>\n                        <Legend>\n                            <div className=\"dot\">&middot;</div>\n                            <Typography {...fontNameSpaces.tb14sb} color=\"#4b4f52\">\n                                {lowerLimit}\n                            </Typography>\n                        </Legend>\n                        <Legend right>\n                            <div className=\"dot\">&middot;</div>\n                            <Typography {...fontNameSpaces.tb14sb} color=\"#4b4f52\">\n                                {upperLimit}\n                            </Typography>\n                        </Legend>\n                    </>\n                ) : null}\n            </MeterContainer>\n        </Row>\n    );\n};\n\nexport default ScoreMeter;\n"],"names":["getScoremeterReading","reading","lowerLimit","upperLimit","getDotRotateDegree","ScoreMeter","props","oldReading","colorMode","DEFAULT_MODE","type","DEFAULT_TYPE","colorConfig","colorGuide","scoremeter","scoreDesc","showIndicators","showLegends","sanitizedReading","LOWER_THRESHOLD","sanitizedOldReading","React","useState","score","setScore","oldScore","animate","setAnimate","scoreUpdate","setScoreUpdate","differenceScore","differential","useEffect","prev","setTimeout","Math","floor","prevScore","scoreReading","dotRotateDegree","transform","meterStrokeColor","fontNameSpaces","th28eb","color","tc8b","marginTop","indicatorColors","increment","neutral","decrement","tb14sb"],"mappings":"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"}