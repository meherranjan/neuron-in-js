import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default from 'react';
import Typography from '../Typography/index.js';
import '../../primitives/index.js';
import { TagContainer, TagIconContainer, TagIcon } from './styles.js';
import { isEmpty } from '../../utils/index.js';
import { getTagColor } from '../../primitives/tags.js';
import { typographyGuide } from '../../primitives/typography.js';

var DEFAULT_TYPE = 'success';
var DEFAULT_MODE = 'dark';

var Tag = function Tag(_ref) {
  var children = _ref.children,
      colorConfig = _ref.colorConfig,
      textStyle = _ref.textStyle,
      icon = _ref.icon,
      _ref$noContainer = _ref.noContainer,
      noContainer = _ref$noContainer === void 0 ? false : _ref$noContainer,
      colorMode = _ref.colorMode,
      type = _ref.type;
  var defaultColorConfig = getTagColor(type !== null && type !== void 0 ? type : DEFAULT_TYPE, colorMode !== null && colorMode !== void 0 ? colorMode : DEFAULT_MODE);
  var tagColorConfig = isEmpty(colorConfig) ? defaultColorConfig : colorConfig !== null && colorConfig !== void 0 ? colorConfig : defaultColorConfig;
  var background = tagColorConfig.background,
      color = tagColorConfig.color;
  var tags = typographyGuide.tags;
  if (noContainer) return /*#__PURE__*/React__default.createElement(Typography, _extends({
    as: "span"
  }, textStyle !== null && textStyle !== void 0 ? textStyle : tags.noContainerText, {
    color: color
  }), children);
  return /*#__PURE__*/React__default.createElement(TagContainer, {
    style: {
      background: background
    }
  }, icon ? /*#__PURE__*/React__default.createElement(TagIconContainer, null, /*#__PURE__*/React__default.createElement(TagIcon, {
    src: icon
  })) : null, /*#__PURE__*/React__default.createElement(Typography, _extends({}, textStyle !== null && textStyle !== void 0 ? textStyle : tags.containerText, {
    color: color
  }), children));
};

export { Tag as default };
//# sourceMappingURL=index.js.map
