import { slicedToArray as _slicedToArray, toConsumableArray as _toConsumableArray, objectSpread2 as _objectSpread2, objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { forwardRef, useState, useImperativeHandle, useEffect } from 'react';
import Portal from '../../../node_modules/react-portal/es/PortalCompat.js';
import '../../../node_modules/react-portal/es/PortalWithState.js';
import { Column, HorizontalSpacer } from '../../Helpers/index.js';
import '../../../primitives/index.js';
import Typography from '../../Typography/index.js';
import { ToastItem, Icon } from '../styles.js';
import { hexToRGBA } from '../../../utils/index.js';
import { getToastColor } from '../../../primitives/toasts.js';
import { typographyGuide } from '../../../primitives/typography.js';

var _excluded = ["id"];

var generateId = function generateId() {
  return Math.random().toString(36).substring(2, 10);
};

var DEFAULT_MSG = 'Something went wrong!';
var DEFAULT_TYPE = 'error';

var ToastIcon = function ToastIcon(_ref) {
  var icon = _ref.icon;
  if (!icon) return null;
  return /*#__PURE__*/React__default.createElement(Icon, {
    src: icon
  });
};

var Toast = function Toast(props) {
  var id = props.id,
      type = props.type,
      _props$content = props.content,
      content = _props$content === void 0 ? DEFAULT_MSG : _props$content,
      _props$colorConfig = props.colorConfig,
      colorConfig = _props$colorConfig === void 0 ? getToastColor(type !== null && type !== void 0 ? type : DEFAULT_TYPE) : _props$colorConfig,
      _props$textStyle = props.textStyle,
      textStyle = _props$textStyle === void 0 ? _objectSpread2({}, typographyGuide.toast) : _props$textStyle,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? true : _props$fullWidth,
      _props$dismissOnClick = props.dismissOnClick,
      dismissOnClick = _props$dismissOnClick === void 0 ? false : _props$dismissOnClick,
      description = props.description,
      icon = props.icon,
      removeToast = props.removeToast,
      autoCloseTime = props.autoCloseTime;
  return /*#__PURE__*/React__default.createElement(ToastItem, {
    background: colorConfig.background,
    autoCloseTime: autoCloseTime,
    fullWidth: fullWidth,
    onClick: function onClick() {
      return dismissOnClick && removeToast && id ? removeToast(id) : null;
    }
  }, /*#__PURE__*/React__default.createElement(Column, null, /*#__PURE__*/React__default.createElement(Typography, _extends({}, textStyle.heading, {
    color: colorConfig.color
  }), content), description ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(HorizontalSpacer, {
    n: 1
  }), /*#__PURE__*/React__default.createElement(Typography, _extends({}, textStyle.description, {
    color: hexToRGBA(colorConfig === null || colorConfig === void 0 ? void 0 : colorConfig.color, 0.5)
  }), description)) : null), /*#__PURE__*/React__default.createElement(ToastIcon, {
    icon: icon
  }));
};
var ToastPortal = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      toastList = _useState2[0],
      setToastList = _useState2[1];

  var _useState3 = useState(''),
      _useState4 = _slicedToArray(_useState3, 2),
      removeId = _useState4[0],
      setRemoveId = _useState4[1];

  useImperativeHandle(ref, function () {
    return {
      addToast: function addToast(options) {
        setToastList([].concat(_toConsumableArray(toastList), [_objectSpread2(_objectSpread2({}, options), {}, {
          id: generateId()
        })]));
      }
    };
  });

  var removeToast = function removeToast(id) {
    if (id) {
      setToastList(function (toasts) {
        return toasts.filter(function (toast) {
          return toast.id !== id;
        });
      });
    }
  };

  useEffect(function () {
    if (removeId) {
      removeToast(removeId);
    }
  }, [removeId]);
  useEffect(function () {
    if (toastList.length) {
      var _toastList = toastList[toastList.length - 1],
          id = _toastList.id,
          autoCloseTime = _toastList.autoCloseTime;
      setTimeout(function () {
        setRemoveId(id);
      }, autoCloseTime || 3000);
    }
  }, [toastList]);
  if (!toastList) return null;
  if (toastList && !toastList.length) return null;
  return /*#__PURE__*/React__default.createElement(Portal, null, /*#__PURE__*/React__default.createElement("div", null, toastList.map(function (toastItemData) {
    var id = toastItemData.id,
        propsToFwd = _objectWithoutProperties(toastItemData, _excluded);

    return /*#__PURE__*/React__default.createElement(Toast, _extends({
      key: id,
      id: id
    }, propsToFwd, {
      removeToast: removeToast
    }));
  })));
});

export { Toast, ToastPortal };
//# sourceMappingURL=ToastPortal.js.map
