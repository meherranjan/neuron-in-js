'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var actions1416bf77_esm = require('../../core/dist/actions-1416bf77.esm.js');
var React = require('react');
var useGestureCore_esm = require('../../core/dist/use-gesture-core.esm.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function useRecognizers(handlers) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var gestureKey = arguments.length > 2 ? arguments[2] : undefined;
  var nativeHandlers = arguments.length > 3 ? arguments[3] : undefined;
  var ctrl = React__default["default"].useMemo(function () {
    return new useGestureCore_esm.Controller(handlers);
  }, []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config, gestureKey);
  React__default["default"].useEffect(ctrl.effect.bind(ctrl));
  React__default["default"].useEffect(function () {
    return ctrl.clean.bind(ctrl);
  }, []);

  if (config.target === undefined) {
    return ctrl.bind.bind(ctrl);
  }

  return undefined;
}

function useDrag(handler, config) {
  actions1416bf77_esm.r(actions1416bf77_esm.e);
  return useRecognizers({
    drag: handler
  }, config || {}, 'drag');
}

exports.ConfigResolverMap = actions1416bf77_esm.C;
exports.EngineMap = actions1416bf77_esm.E;
exports.dragAction = actions1416bf77_esm.e;
exports.registerAction = actions1416bf77_esm.r;
exports.useDrag = useDrag;
//# sourceMappingURL=use-gesture-react.esm.js.map
