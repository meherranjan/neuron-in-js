'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var colors = require('./colors.js');
var typography = require('./typography.js');

var buttonTypography = typography.typographyGuide.buttons;
var getButtonColors = function getButtonColors(mode, variant, kind) {
  var colors$1 = mode === 'dark' ? colors.colorGuide.darkComponents.buttons : colors.colorGuide.lightComponents.buttons;
  var transparentEdge = kind === 'elevated' ? {
    top: 'transparent',
    left: 'transparent'
  } : {};
  return variant === 'primary' ? _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, colors$1.primary), {}, {
    mode: mode,
    edgeColors: _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, colors$1.primary.edgeColors), transparentEdge)
  }) : _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, colors$1.secondary), {}, {
    mode: mode,
    edgeColors: _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, colors$1.secondary.edgeColors), transparentEdge)
  });
};

var getSize = function getSize(number) {
  switch (number) {
    case '50':
      return 'big';

    case '40':
      return 'medium';

    case '30':
      return 'small';

    default:
      return 'medium';
  }
};

var sizeConfig = {
  big: {
    height: '50px',
    padding: '0px 30px',
    iconHeight: '20px'
  },
  medium: {
    height: '40px',
    padding: '0px 20px',
    iconHeight: '16px'
  },
  small: {
    height: '30px',
    padding: '0px 25px',
    iconHeight: '14px'
  }
};
var getSpacingConfig = function getSpacingConfig(size) {
  switch (size) {
    case 'big':
      return sizeConfig.big;

    case 'medium':
      return sizeConfig.medium;

    case 'small':
      return sizeConfig.small;

    default:
      return sizeConfig.medium;
  }
};
var getTextStyle = function getTextStyle(size) {
  switch (size) {
    case 'big':
      return buttonTypography.big;

    case 'medium':
      return buttonTypography.medium;

    case 'small':
      return buttonTypography.small;

    default:
      return buttonTypography.medium;
  }
};
/** ****************************************************************************************** */
// New Configs

var getButtonConfig = function getButtonConfig(name) {
  var colorMode = name.slice(1, 2) === 'l' ? 'light' : 'dark';
  var variant = name.slice(2, 3) === 's' ? 'secondary' : 'primary';
  var size = name.slice(3, 5);
  var kind = name.slice(5, 6) === 'p' ? 'elevated' : 'flat';
  var arrow = name.slice(6, 7);
  var config = {
    colorConfig: getButtonColors(colorMode, variant, kind),
    spacingConfig: getSpacingConfig(getSize(size)),
    colorMode: colorMode,
    size: size,
    kind: kind,
    variant: variant,
    showArrow: Boolean(Number(arrow))
  };
  return config;
};

exports.getButtonColors = getButtonColors;
exports.getButtonConfig = getButtonConfig;
exports.getSpacingConfig = getSpacingConfig;
exports.getTextStyle = getTextStyle;
//# sourceMappingURL=buttons.js.map
