{"version":3,"file":"use-gesture-react.esm.js","sources":["../../../../../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js"],"sourcesContent":["import { registerAction, dragAction, pinchAction, wheelAction, scrollAction, moveAction, hoverAction } from '@use-gesture/core/actions';\nexport * from '@use-gesture/core/actions';\nimport React from 'react';\nimport { Controller, parseMergedHandlers } from '@use-gesture/core';\nexport * from '@use-gesture/core/utils';\nexport * from '@use-gesture/core/types';\n\nfunction useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {\n  const ctrl = React.useMemo(() => new Controller(handlers), []);\n  ctrl.applyHandlers(handlers, nativeHandlers);\n  ctrl.applyConfig(config, gestureKey);\n  React.useEffect(ctrl.effect.bind(ctrl));\n  React.useEffect(() => {\n    return ctrl.clean.bind(ctrl);\n  }, []);\n\n  if (config.target === undefined) {\n    return ctrl.bind.bind(ctrl);\n  }\n\n  return undefined;\n}\n\nfunction useDrag(handler, config) {\n  registerAction(dragAction);\n  return useRecognizers({\n    drag: handler\n  }, config || {}, 'drag');\n}\n\nfunction usePinch(handler, config) {\n  registerAction(pinchAction);\n  return useRecognizers({\n    pinch: handler\n  }, config || {}, 'pinch');\n}\n\nfunction useWheel(handler, config) {\n  registerAction(wheelAction);\n  return useRecognizers({\n    wheel: handler\n  }, config || {}, 'wheel');\n}\n\nfunction useScroll(handler, config) {\n  registerAction(scrollAction);\n  return useRecognizers({\n    scroll: handler\n  }, config || {}, 'scroll');\n}\n\nfunction useMove(handler, config) {\n  registerAction(moveAction);\n  return useRecognizers({\n    move: handler\n  }, config || {}, 'move');\n}\n\nfunction useHover(handler, config) {\n  registerAction(hoverAction);\n  return useRecognizers({\n    hover: handler\n  }, config || {}, 'hover');\n}\n\nfunction createUseGesture(actions) {\n  actions.forEach(registerAction);\n  return function useGesture(_handlers, _config) {\n    const {\n      handlers,\n      nativeHandlers,\n      config\n    } = parseMergedHandlers(_handlers, _config || {});\n    return useRecognizers(handlers, config, undefined, nativeHandlers);\n  };\n}\n\nfunction useGesture(handlers, config) {\n  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);\n  return hook(handlers, config || {});\n}\n\nexport { createUseGesture, useDrag, useGesture, useHover, useMove, usePinch, useScroll, useWheel };\n"],"names":["useRecognizers","handlers","config","gestureKey","nativeHandlers","ctrl","React","useMemo","Controller","applyHandlers","applyConfig","useEffect","effect","bind","clean","target","undefined","useDrag","handler","registerAction","dragAction","drag"],"mappings":";;;;;AAOA,SAASA,cAAT,CAAwBC,QAAxB,EAA2E;EAAA,IAAzCC,MAAyC,uEAAhC,EAAgC,CAAA;AAAA,EAAA,IAA5BC,UAA4B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AAAA,EAAA,IAAhBC,cAAgB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AACzE,EAAA,IAAMC,IAAI,GAAGC,cAAK,CAACC,OAAN,CAAc,YAAA;AAAA,IAAA,OAAM,IAAIC,UAAJ,CAAeP,QAAf,CAAN,CAAA;GAAd,EAA8C,EAA9C,CAAb,CAAA;AACAI,EAAAA,IAAI,CAACI,aAAL,CAAmBR,QAAnB,EAA6BG,cAA7B,CAAA,CAAA;AACAC,EAAAA,IAAI,CAACK,WAAL,CAAiBR,MAAjB,EAAyBC,UAAzB,CAAA,CAAA;EACAG,cAAK,CAACK,SAAN,CAAgBN,IAAI,CAACO,MAAL,CAAYC,IAAZ,CAAiBR,IAAjB,CAAhB,CAAA,CAAA;EACAC,cAAK,CAACK,SAAN,CAAgB,YAAM;AACpB,IAAA,OAAON,IAAI,CAACS,KAAL,CAAWD,IAAX,CAAgBR,IAAhB,CAAP,CAAA;AACD,GAFD,EAEG,EAFH,CAAA,CAAA;;AAIA,EAAA,IAAIH,MAAM,CAACa,MAAP,KAAkBC,SAAtB,EAAiC;AAC/B,IAAA,OAAOX,IAAI,CAACQ,IAAL,CAAUA,IAAV,CAAeR,IAAf,CAAP,CAAA;AACD,GAAA;;AAED,EAAA,OAAOW,SAAP,CAAA;AACD,CAAA;;AAED,SAASC,OAAT,CAAiBC,OAAjB,EAA0BhB,MAA1B,EAAkC;EAChCiB,cAAc,CAACC,UAAD,CAAd,CAAA;AACA,EAAA,OAAOpB,cAAc,CAAC;AACpBqB,IAAAA,IAAI,EAAEH,OAAAA;AADc,GAAD,EAElBhB,MAAM,IAAI,EAFQ,EAEJ,MAFI,CAArB,CAAA;AAGD;;;;"}