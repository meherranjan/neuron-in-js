import { slicedToArray as _slicedToArray, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import * as React from 'react';
import { Cross } from '../Helpers/index.js';
import InputField from '../InputField/index.js';
import '../../primitives/index.js';
import { SearchBarContainer } from './styles.js';
import { isEmpty } from '../../utils/index.js';
import { typographyGuide } from '../../primitives/typography.js';
import { colorGuide } from '../../primitives/colors.js';

var SearchBar = function SearchBar(props) {
  var iconUrl = props.iconUrl,
      colorConfig = props.colorConfig,
      _props$textStyle = props.textStyle,
      textStyle = _props$textStyle === void 0 ? typographyGuide.searchBar.input : _props$textStyle,
      placeholder = props.placeholder,
      handleSearchInput = props.handleSearchInput,
      colorMode = props.colorMode,
      inputColorConfig = props.inputColorConfig,
      onSubmit = props.onSubmit;

  var _React$useState = React.useState(''),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      searchText = _React$useState2[0],
      setSearchText = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      isActive = _React$useState4[0],
      setIsActive = _React$useState4[1];

  var inputRef = React.useRef(null);

  var handleChange = function handleChange(event) {
    var _event$target$value, _event$target;

    var value = (_event$target$value = event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value) !== null && _event$target$value !== void 0 ? _event$target$value : '';
    setSearchText(value);
    handleSearchInput(value);
  };

  var handleSubmit = function handleSubmit(e) {
    var _inputRef$current;

    e === null || e === void 0 ? void 0 : e.preventDefault();
    inputRef === null || inputRef === void 0 ? void 0 : (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.blur();
    onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
  };

  var clearData = function clearData() {
    setSearchText('');
    handleSearchInput('');
  };

  var defaultSearchBarColorConfig = colorGuide[colorMode === 'light' ? 'lightComponents' : 'darkComponents'].searchBar;
  var defaultInputFieldColorConfig = colorGuide[colorMode === 'light' ? 'lightComponents' : 'darkComponents'].inputFields;
  var searchColorConfig = isEmpty(colorConfig) ? defaultSearchBarColorConfig : colorConfig !== null && colorConfig !== void 0 ? colorConfig : defaultSearchBarColorConfig;
  var inputFieldColorConfig = isEmpty(inputColorConfig) ? defaultInputFieldColorConfig : inputColorConfig !== null && inputColorConfig !== void 0 ? inputColorConfig : defaultInputFieldColorConfig;
  return /*#__PURE__*/React.createElement(SearchBarContainer, _extends({}, searchColorConfig, {
    className: isActive ? 'active' : '',
    onClick: function onClick() {
      return setIsActive(true);
    },
    onBlur: function onBlur() {
      setIsActive(false);
    }
  }), iconUrl ? /*#__PURE__*/React.createElement("img", {
    src: iconUrl,
    alt: "search",
    className: "icon"
  }) : null, /*#__PURE__*/React.createElement("div", {
    className: "input"
  }, /*#__PURE__*/React.createElement("form", {
    onSubmit: handleSubmit,
    style: {
      margin: '0',
      padding: '0'
    }
  }, /*#__PURE__*/React.createElement(InputField, {
    inputRef: inputRef,
    autoFocus: isActive,
    textStyle: {
      input: textStyle,
      label: typographyGuide.inputFields.label
    },
    placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : 'search',
    value: searchText,
    onChange: handleChange,
    colorConfig: inputFieldColorConfig
  }), /*#__PURE__*/React.createElement("input", {
    type: "submit",
    style: {
      display: 'none'
    }
  }))), searchText ? /*#__PURE__*/React.createElement(Cross, {
    color: searchColorConfig.closeIcon,
    onClick: clearData
  }) : null);
};

export { SearchBar as default };
//# sourceMappingURL=index.js.map
