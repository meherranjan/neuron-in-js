'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var reactSpringCore_esm = require('../../core/dist/react-spring-core.esm.js');
var ReactDOM = require('react-dom');
var reactSpringShared_esm = require('../../shared/dist/react-spring-shared.esm.js');
var reactSpringAnimated_esm = require('../../animated/dist/react-spring-animated.esm.js');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded$2 = ["style", "children", "scrollTop", "scrollLeft"];
var isCustomPropRE = /^--/;

function dangerousStyleValue(name, value) {
  if (value == null || typeof value === 'boolean' || value === '') return '';
  if (typeof value === 'number' && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px';
  return ('' + value).trim();
}

var attributeCache = {};

function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }

  var isFilterElement = instance.nodeName === 'filter' || instance.parentNode && instance.parentNode.nodeName === 'filter';

  var _ref = props,
      style = _ref.style,
      children = _ref.children,
      scrollTop = _ref.scrollTop,
      scrollLeft = _ref.scrollLeft,
      attributes = _objectWithoutPropertiesLoose(_ref, _excluded$2);

  var values = Object.values(attributes);
  var names = Object.keys(attributes).map(function (name) {
    return isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, function (n) {
      return '-' + n.toLowerCase();
    }));
  });

  if (children !== void 0) {
    instance.textContent = children;
  }

  for (var name in style) {
    if (style.hasOwnProperty(name)) {
      var value = dangerousStyleValue(name, style[name]);

      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }

  names.forEach(function (name, i) {
    instance.setAttribute(name, values[i]);
  });

  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }

  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
}

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

var prefixKey = function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
};

var prefixes = ['Webkit', 'Ms', 'Moz', 'O'];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce(function (acc, prop) {
  prefixes.forEach(function (prefix) {
    return acc[prefixKey(prefix, prop)] = acc[prop];
  });
  return acc;
}, isUnitlessNumber);
var _excluded$1 = ["x", "y", "z"];
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;

var addUnit = function addUnit(value, unit) {
  return reactSpringShared_esm.is.num(value) && value !== 0 ? value + unit : value;
};

var isValueIdentity = function isValueIdentity(value, id) {
  return reactSpringShared_esm.is.arr(value) ? value.every(function (v) {
    return isValueIdentity(v, id);
  }) : reactSpringShared_esm.is.num(value) ? value === id : parseFloat(value) === id;
};

var AnimatedStyle = /*#__PURE__*/function (_AnimatedObject) {
  _rollupPluginBabelHelpers.inherits(AnimatedStyle, _AnimatedObject);

  var _super = _rollupPluginBabelHelpers.createSuper(AnimatedStyle);

  function AnimatedStyle(_ref) {
    _rollupPluginBabelHelpers.classCallCheck(this, AnimatedStyle);

    var x = _ref.x,
        y = _ref.y,
        z = _ref.z,
        style = _objectWithoutPropertiesLoose(_ref, _excluded$1);

    var inputs = [];
    var transforms = [];

    if (x || y || z) {
      inputs.push([x || 0, y || 0, z || 0]);
      transforms.push(function (xyz) {
        return ["translate3d(".concat(xyz.map(function (v) {
          return addUnit(v, 'px');
        }).join(','), ")"), isValueIdentity(xyz, 0)];
      });
    }

    reactSpringShared_esm.eachProp(style, function (value, key) {
      if (key === 'transform') {
        inputs.push([value || '']);
        transforms.push(function (transform) {
          return [transform, transform === ''];
        });
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (reactSpringShared_esm.is.und(value)) return;
        var unit = pxTransforms.test(key) ? 'px' : degTransforms.test(key) ? 'deg' : '';
        inputs.push(reactSpringShared_esm.toArray(value));
        transforms.push(key === 'rotate3d' ? function (_ref2) {
          var _ref3 = _rollupPluginBabelHelpers.slicedToArray(_ref2, 4),
              x = _ref3[0],
              y = _ref3[1],
              z = _ref3[2],
              deg = _ref3[3];

          return ["rotate3d(".concat(x, ",").concat(y, ",").concat(z, ",").concat(addUnit(deg, unit), ")"), isValueIdentity(deg, 0)];
        } : function (input) {
          return ["".concat(key, "(").concat(input.map(function (v) {
            return addUnit(v, unit);
          }).join(','), ")"), isValueIdentity(input, key.startsWith('scale') ? 1 : 0)];
        });
      }
    });

    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }

    return _super.call(this, style);
  }

  return _rollupPluginBabelHelpers.createClass(AnimatedStyle);
}(reactSpringAnimated_esm.AnimatedObject);

var FluidTransform = /*#__PURE__*/function (_FluidValue) {
  _rollupPluginBabelHelpers.inherits(FluidTransform, _FluidValue);

  var _super2 = _rollupPluginBabelHelpers.createSuper(FluidTransform);

  function FluidTransform(inputs, transforms) {
    var _this;

    _rollupPluginBabelHelpers.classCallCheck(this, FluidTransform);

    _this = _super2.call(this);
    _this._value = null;
    _this.inputs = inputs;
    _this.transforms = transforms;
    return _this;
  }

  _rollupPluginBabelHelpers.createClass(FluidTransform, [{
    key: "get",
    value: function get() {
      return this._value || (this._value = this._get());
    }
  }, {
    key: "_get",
    value: function _get() {
      var _this2 = this;

      var transform = '';
      var identity = true;
      reactSpringShared_esm.each(this.inputs, function (input, i) {
        var arg1 = reactSpringShared_esm.getFluidValue(input[0]);

        var _this2$transforms$i = _this2.transforms[i](reactSpringShared_esm.is.arr(arg1) ? arg1 : input.map(reactSpringShared_esm.getFluidValue)),
            _this2$transforms$i2 = _rollupPluginBabelHelpers.slicedToArray(_this2$transforms$i, 2),
            t = _this2$transforms$i2[0],
            id = _this2$transforms$i2[1];

        transform += ' ' + t;
        identity = identity && id;
      });
      return identity ? 'none' : transform;
    }
  }, {
    key: "observerAdded",
    value: function observerAdded(count) {
      var _this3 = this;

      if (count == 1) reactSpringShared_esm.each(this.inputs, function (input) {
        return reactSpringShared_esm.each(input, function (value) {
          return reactSpringShared_esm.hasFluidValue(value) && reactSpringShared_esm.addFluidObserver(value, _this3);
        });
      });
    }
  }, {
    key: "observerRemoved",
    value: function observerRemoved(count) {
      var _this4 = this;

      if (count == 0) reactSpringShared_esm.each(this.inputs, function (input) {
        return reactSpringShared_esm.each(input, function (value) {
          return reactSpringShared_esm.hasFluidValue(value) && reactSpringShared_esm.removeFluidObserver(value, _this4);
        });
      });
    }
  }, {
    key: "eventObserved",
    value: function eventObserved(event) {
      if (event.type == 'change') {
        this._value = null;
      }

      reactSpringShared_esm.callFluidObservers(this, event);
    }
  }]);

  return FluidTransform;
}(reactSpringShared_esm.FluidValue);

var primitives = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', 'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];
var _excluded = ["scrollTop", "scrollLeft"];
reactSpringShared_esm.Globals.assign({
  batchedUpdates: ReactDOM.unstable_batchedUpdates,
  createStringInterpolator: reactSpringShared_esm.createStringInterpolator,
  colors: reactSpringShared_esm.colors
});
var host = reactSpringAnimated_esm.createHost(primitives, {
  applyAnimatedValues: applyAnimatedValues,
  createAnimatedStyle: function createAnimatedStyle(style) {
    return new AnimatedStyle(style);
  },
  getComponentProps: function getComponentProps(_ref) {
    var props = _objectWithoutPropertiesLoose(_ref, _excluded);

    return props;
  }
});
var animated = host.animated;

exports.BailSignal = reactSpringCore_esm.BailSignal;
exports.Controller = reactSpringCore_esm.Controller;
exports.FrameValue = reactSpringCore_esm.FrameValue;
exports.Interpolation = reactSpringCore_esm.Interpolation;
exports.SpringContext = reactSpringCore_esm.SpringContext;
exports.SpringRef = reactSpringCore_esm.SpringRef;
exports.SpringValue = reactSpringCore_esm.SpringValue;
exports.config = reactSpringCore_esm.config;
exports.easings = reactSpringCore_esm.easings;
exports.inferTo = reactSpringCore_esm.inferTo;
exports.useSpring = reactSpringCore_esm.useSpring;
exports.useSprings = reactSpringCore_esm.useSprings;
exports.Globals = reactSpringShared_esm.Globals;
exports.createInterpolator = reactSpringShared_esm.createInterpolator;
exports.a = animated;
exports.animated = animated;
//# sourceMappingURL=react-spring-web.esm.js.map
